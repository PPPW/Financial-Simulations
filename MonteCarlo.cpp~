#include "MonteCarlo.hpp"
#include <boost/math/distributions.hpp>
#include <math.h>
#include <iostream>

MonteCarlo::MonteCarlo(Instrument& instrument_) 
    : instrument(instrument_), spot(spot_), r(r_), dvdnt(dvdnt_), vol(vol_),
      Dimensionality(Dimensionality_)
{
    std::vector<double> results(Dimensionality);
}

double MonteCarlo::getOneResult() const
{

    double expiry = instrument.getExpiry();
    spotMaturity = spot*exp((r-dvdnt)*expiry) - vol*vol*expiry/2
        +vol*sqrt(expiry)*brownian;
    return instrument.getPayOff(spotMaturity);
}

double MonteCarlo::currentMean() const
{
    double sum = 0;
    for (auto result : results) {
        sum += result;
    }
    return sum / results.size();
}

double MonteCarlo::currentStd() const
{
    double sumSqr = 0;
    double mean = currentMean();
    for (auto result : results) {
        sumSqr += (result - mean) * (result - mean);
    }
    return sqrt(sumSqr) / (results.size()-1); // sample standard deviation
}

double MonteCarlo::simulate() 
{
    unsigned long seed =12411;  // set seed
    boost::mt19937 rng(seed);   // generate pseudo random number series
    boost::normal_distribution <> norm(0.0, 1.0);
    boost::variate_generator <boost::mt19937,boost::normal_distribution<> >
        randNorm(rng, norm);           // connect with normal distribution
    
    brownian = randNorm();
    double currentResult;
    for (int i = 0; i < Dimensionality; i++) {
        currentResult = getOneResult();
        results.push_back(currentResult);
    }
    std::out << "std is " << currentStd() << std::endl;
    return currentMean()
}

int main() {
    

}
